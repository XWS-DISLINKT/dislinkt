version: "3.8"

x-logging: &fluent-bit
  driver: fluentd
  options:
    fluentd-address: ${FLUENT_BIT_ADDRESS}:24224

services:
  profile-service:
    image: profile-service
    container_name: profile-service
    build:
      context: .
      dockerfile: ./profile-service/Dockerfile
    restart: on-failure
    environment:
      PROFILE_DB_HOST: ${PROFILE_DB_HOST}
      PROFILE_DB_PORT: ${PROFILE_DB_PORT}
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
      CONNECTION_SERVICE_HOST: ${CONNECTION_SERVICE_HOST}
      CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      CREATE_USER_COMMAND_SUBJECT: ${CREATE_USER_COMMAND_SUBJECT}
      CREATE_USER_REPLY_SUBJECT: ${CREATE_USER_REPLY_SUBJECT}
    logging: *fluent-bit
    depends_on:
      - profile-db
    networks:
      - servers
      - monitoring

  post-service:
    image: post-service
    container_name: post-service
    build:
      context: .
      dockerfile: ./post-service/Dockerfile
    restart: on-failure
    environment:
      POST_DB_HOST: ${POST_DB_HOST}
      POST_DB_PORT: ${POST_DB_PORT}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      CONNECTION_SERVICE_HOST: ${CONNECTION_SERVICE_HOST}
      CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
      POST_GRAPH_DB_HOST: ${POST_GRAPH_DB_HOST}
      POST_GRAPH_DB_PORT: ${POST_GRAPH_DB_PORT}
      POST_GRAPH_DB_PROTOCOL: ${POST_GRAPH_DB_PROTOCOL}
      POST_GRAPH_DB_USERNAME: ${POST_GRAPH_DB_USERNAME}
      POST_GRAPH_DB_PASSWORD: ${POST_GRAPH_DB_PASSWORD}
      PROFILE_SERVICE_HOST: ${PROFILE_SERVICE_HOST}
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
    logging: *fluent-bit
    depends_on:
      - post-db
      - post-graph-db
    networks:
      - servers
      - monitoring

  api-gateway:
    image: api-gateway
    container_name: api-gateway
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    restart: on-failure
    volumes:
      - static-content:/usr/src/app/assets/images
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    environment:
      GATEWAY_PORT: ${GATEWAY_PORT}
      PROFILE_SERVICE_HOST: ${PROFILE_SERVICE_HOST}
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
      POST_SERVICE_HOST: ${POST_SERVICE_HOST}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      AUTHENTICATION_SERVICE_HOST: ${AUTHENTICATION_SERVICE_HOST}
      AUTHENTICATION_SERVICE_PORT: ${AUTHENTICATION_SERVICE_PORT}
      CONNECTION_SERVICE_HOST: ${CONNECTION_SERVICE_HOST}
      CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
      JAEGER_SERVICE_NAME: post_service
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_MANAGER_HOST_PORT: jaeger:5778
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
    logging: *fluent-bit
    networks:
      - servers
      - monitoring

  authentication-service:
    image: authentication-service
    container_name: authentication-service
    build:
      context: .
      dockerfile: ./authentication-service/Dockerfile
    restart: on-failure
    ports:
      - ${AUTHENTICATION_SERVICE_PORT}:${AUTHENTICATION_SERVICE_PORT}
    environment:
      AUTHENTICATION_SERVICE_PORT: ${AUTHENTICATION_SERVICE_PORT}
      PROFILE_SERVICE_HOST: ${PROFILE_SERVICE_HOST}
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
    logging: *fluent-bit
    networks:
      - servers
      - monitoring

  connection-service:
    image: connection-service
    container_name: connection-service
    build:
      context: .
      dockerfile: ./connection-service/Dockerfile
    restart: on-failure
    environment:
      CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
      CONNECTION_DB_HOST: ${CONNECTION_DB_HOST}
      CONNECTION_DB_PORT: ${CONNECTION_DB_PORT}
      CONNECTION_DB_PROTOCOL: ${CONNECTION_DB_PROTOCOL}
      CONNECTION_DB_USERNAME: ${CONNECTION_DB_USERNAME}
      CONNECTION_DB_PASSWORD: ${CONNECTION_DB_PASSWORD}
      PROFILE_SERVICE_HOST: ${PROFILE_SERVICE_HOST}
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      CREATE_USER_COMMAND_SUBJECT: ${CREATE_USER_COMMAND_SUBJECT}
      CREATE_USER_REPLY_SUBJECT: ${CREATE_USER_REPLY_SUBJECT}
    logging: *fluent-bit
    depends_on:
      - connection-db
    networks:
      - servers
      - monitoring

  client-app-service:
    image: client-app-service
    container_name: client-app-service
    build:
      context: .
      dockerfile: client-web-app/dislinkt-client/Dockerfile
    restart: on-failure
    volumes:
      - static-content:/usr/src/app/assets/images
    ports:
      - "4200:4200"
    logging: *fluent-bit
    networks:
      - servers
      - monitoring

  profile-db:
    image: mongo
    container_name: profile-db
    restart: on-failure
    logging: *fluent-bit
    networks:
      - servers
      - monitoring

  post-db:
    image: mongo
    container_name: post-db
    restart: on-failure
    logging: *fluent-bit
    networks:
      - servers
      - monitoring

  connection-db:
    image: neo4j
    environment:
      NEO4J_AUTH: 'neo4j/password'
    container_name: connection-db
    restart: on-failure
    logging: *fluent-bit
    networks:
      - servers
      - monitoring

  post-graph-db:
    image: neo4j
    environment:
      NEO4J_AUTH: 'neo4j/password'
    container_name: post-graph-db
    restart: on-failure
    logging: *fluent-bit
    networks:
      - servers
      - monitoring

  nats:
    image: nats
    container_name: nats
    restart: on-failure
    logging: *fluent-bit
    networks:
      - servers
      - monitoring

networks:
  servers:
    name: servers
    driver: bridge
  monitoring:
    external: true

volumes:
  static-content: