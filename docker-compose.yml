version: "3.8"

services:
  profile-service:
    image: profile-service
    container_name: profile-service
    build:
      context: .
      dockerfile: ./profile-service/Dockerfile
    restart: on-failure
    environment:
      PROFILE_DB_HOST: ${PROFILE_DB_HOST}
      PROFILE_DB_PORT: ${PROFILE_DB_PORT}
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
    depends_on:
      - profile-db
    networks:
      - network

  post-service:
    image: post-service
    container_name: post-service
    build:
      context: .
      dockerfile: ./post-service/Dockerfile
    restart: on-failure
    environment:
      POST_DB_HOST: ${POST_DB_HOST}
      POST_DB_PORT: ${POST_DB_PORT}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
    depends_on:
      - post-db
    networks:
      - network

  api-gateway:
    image: api-gateway
    container_name: api-gateway
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    environment:
      GATEWAY_PORT: ${GATEWAY_PORT}
      PROFILE_SERVICE_HOST: ${PROFILE_SERVICE_HOST}
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
      POST_SERVICE_HOST: ${POST_SERVICE_HOST}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      AUTHENTICATION_SERVICE_HOST: ${AUTHENTICATION_SERVICE_HOST}
      AUTHENTICATION_SERVICE_PORT: ${AUTHENTICATION_SERVICE_PORT}
    networks:
      - network

  authentication-service:
    image: authentication-service
    container_name: authentication-service
    build:
      context: .
      dockerfile: ./authentication-service/Dockerfile
    restart: on-failure
    ports:
      - ${AUTHENTICATION_SERVICE_PORT}:${AUTHENTICATION_SERVICE_PORT}
    environment:
      AUTHENTICATION_SERVICE_PORT: ${AUTHENTICATION_SERVICE_PORT}
      PROFILE_SERVICE_HOST: ${PROFILE_SERVICE_HOST}
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
    networks:
      - network

  connection-service:
    image: connection-service
    container_name: connection-service
    build:
      context: .
      dockerfile: ./connection-service/Dockerfile
    restart: on-failure
    environment:
      CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
      CONNECTION_DB_HOST: ${CONNECTION_DB_HOST}
      CONNECTION_DB_PORT: ${CONNECTION_DB_PORT}
      CONNECTION_DB_PROTOCOL: ${CONNECTION_DB_PROTOCOL}
      CONNECTION_DB_USERNAME: ${CONNECTION_DB_USERNAME}
      CONNECTION_DB_PASSWORD: ${CONNECTION_DB_PASSWORD}
    depends_on:
      - connection-db
    networks:
      - network

  profile-db:
    image: mongo
    container_name: profile-db
    restart: on-failure
    networks:
      - network

  post-db:
    image: mongo
    container_name: post-db
    restart: on-failure
    networks:
      - network

  connection-db:
    image: neo4j
    environment:
      NEO4J_AUTH: 'neo4j/password'
    container_name: connection-db
    restart: on-failure
    networks:
      - network

  nats:
    image: nats
    container_name: nats
    restart: on-failure
    networks:
      - network

networks:
  network:
    driver: bridge