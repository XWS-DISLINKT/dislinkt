syntax = "proto3";

option go_package = "github.com/XWS-DISLINKT/dislinkt/common/post";

package post;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

service PostService{
  rpc Get(GetRequest) returns(GetResponse) {
    option (google.api.http) = {
      get: "/post/{id}"
    };
  }
  rpc GetAll(GetAllRequest) returns(GetAllResponse) {
    option (google.api.http) = {
      get: "/post"
    };
  }
  rpc Post(PostM) returns(PostM) {
    option (google.api.http) = {
      post: "/post"
      body: "*"
    };
  }
  rpc GetByUser(GetRequest) returns(GetAllResponse) {
    option (google.api.http) = {
      get: "/post/user/{id}"
    };
  }
  rpc LikePost(ReactionRequest) returns(ReactionResponse) {
    option (google.api.http) = {
      post: "/post/like"
      body: "*"
    };
  }
  rpc DislikePost(ReactionRequest) returns(ReactionResponse) {
    option (google.api.http) = {
      post: "/post/dislike"
      body: "*"
    };
  }
  rpc CommentPost(CommentRequest) returns(CommentResponse) {
    option (google.api.http) = {
      post: "/post/comment"
      body: "*"
    };
  }
  rpc GetAllReactionsByPost(GetRequest) returns(AllReactionsResponse) {
    option (google.api.http) = {
      get: "/post/{id}/reaction"
    };
  }
  rpc GetAllCommentsByPost(GetRequest) returns(AllCommentsResponse) {
    option (google.api.http) = {
      get: "/post/{id}/comment"
    };
  }
  rpc GetFeed(GetRequest) returns(GetAllResponse) {
    option (google.api.http) = {
      get: "/post/feed/{id}"
    };
  }
  rpc PostJob(PostJobRequest) returns(Job) {
	option (google.api.http) = {
      post: "/post/job"
	  body: "*"
    };
  }
  rpc GetAllJobs(GetAllJobsRequest) returns(GetAllJobsResponse) {
	option (google.api.http) = {
      get: "/post/job"
    };
  }
  rpc RegisterApiKey(GetApiKeyRequest) returns (GetApiKeyResponse) {
	option (google.api.http) = {
      post: "/post/job/apikey"
	  body: "*"
    };
  }
  rpc SearchJobsByPosition(SearchJobsByPositionRequest) returns(SearchJobsByPositionResponse) {
	option (google.api.http) = {
      get: "/post/job/{search}"
    };
  }
  rpc PostJobDislinkt(PostJobDislinktRequest) returns(Job) {
	option (google.api.http) = {
      post: "/post/job/dislinkt"
	  body: "*"
    };
  }
  rpc SuggestJob(SuggestJobRequest) returns(SuggestJobResponse) {
	option (google.api.http) = {
      post: "/post/job/suggest"
	  body: "*"
    };
  }
  
  rpc GetSuggestJobsFor(GetSuggestJobsForRequest) returns(GetSuggestJobsForResponse) {
    option (google.api.http) = {
      get: "/post/job/suggest/{id}"
    };
  }
  
  
}

message GetSuggestJobsForRequest {
  string id = 1;
}

message GetSuggestJobsForResponse {
  repeated JobPosition jobPositions = 1;
}

message JobPosition {
	string jobId = 1;
	string position = 2;
}

message SuggestJobRequest {
	string skill = 1;
	string experience = 2;
}

message SuggestJobResponse {
	repeated JobPosition jobPositions = 1;
}

message PostJobDislinktRequest {
	Job job = 1;
}

message SearchJobsByPositionRequest {
	string search = 1;
}

message SearchJobsByPositionResponse {
	repeated Job jobs = 1;
}

message PostJobRequest {
	Job job = 1;
	string apiKey = 2;
}

message GetApiKeyRequest{
	string userId = 1;
}

message GetApiKeyResponse{
	string userId = 1;
	string apiKey = 2;
}


message GetAllJobsRequest{
	string search = 1;
}

message GetAllJobsResponse{
	repeated Job jobs = 1;
}

message Job {
	string id = 1;
	string position = 2;
	string companyName = 3;
	enum Seniority {
		Junior = 0;
		Medior = 1;
		Senior = 2;
	}
	Seniority seniority = 4; 
	string location = 5;
	string description = 6;
	google.protobuf.Timestamp closingDate = 7;
	string userId = 8;
}

message PostM {
  string id = 1;
  string userId = 2;
  string text = 3;
  string picture = 4;
  repeated string links = 5;
}

message PostReaction {
  string id = 1;
  string postId = 2;
  string userId = 3;
  string reaction = 4;
  string username = 5;
}

message Comment {
  string id = 1;
  string postId = 2;
  string userId = 3;
  string text = 4;
  string username = 5;
}

message GetRequest {
  string id = 1;
}

message GetResponse {
  PostM post = 1;
}

message GetAllRequest {
}

message GetAllResponse {
  repeated PostM posts = 1;
}

message PostRequest {
  PostM post = 1;
}

message PostResponse {
  PostM post = 1;
}

message ReactionRequest {
   PostReaction reaction = 1;
}

message ReactionResponse {
  PostReaction postReaction = 1;
}

message CommentRequest {
  Comment comment = 1;
}

message CommentResponse {
  Comment comment = 1;
}

message AllReactionsResponse {
  repeated PostReaction reactions = 1;
}

message AllCommentsResponse {
  repeated Comment comments = 1;
}

