syntax = "proto3";

option go_package = "github.com/XWS-DISLINKT/dislinkt/common/connection";

package connection;

import "google/api/annotations.proto";

service ConnectionService {
  rpc MakeConnectionWithPublicProfile(ConnectionBody) returns(ConnectionResponse) {
    option (google.api.http) = {
      post: "/connection"
      body: "*"
    };
  }

  rpc MakeConnectionRequest(ConnectionBody) returns(ConnectionResponse) {
    option (google.api.http) = {
      post: "/connection/request"
      body: "*"
    };
  }

  rpc ApproveConnectionRequest(ConnectionBody) returns(ConnectionResponse) {
    option (google.api.http) = {
      put: "/connection/request"
      body: "*"
    };
  }

  rpc GetConnectionsUsernamesFor(GetConnectionsUsernamesRequest) returns(GetConnectionsUsernamesResponse) {
    option (google.api.http) = {
      get: "/connection/usernames/{id}"
    };
  }

  rpc GetRequestsUsernamesFor(GetConnectionsUsernamesRequest) returns(GetConnectionsUsernamesResponse) {
    option (google.api.http) = {
      get: "/connection/requests/{id}"
    };
  }
  
  rpc InsertUser(User) returns(Status) {
    option (google.api.http) = {
      post: "/connection/user"
      body: "*"
    };
  }
  
  rpc GetSuggestionIdsFor(GetSuggestionIdsRequest) returns(GetSuggestionIdsResponse) {
    option (google.api.http) = {
      get: "/connection/suggestion/{id}"
    };
  }

  rpc BlockConnection(ConnectionBody) returns(ConnectionResponse) {
    option (google.api.http) = {
      post: "/connection/block"
      body: "*"
    };
  }

}

message Status {
  bool success = 1;
}

message User {
  string userId = 1;
  bool isPrivate = 2;
}

message ConnectionRequest {
  ConnectionBody connectionBody = 1;
}

message ConnectionResponse {
  bool success = 1;
}

message ConnectionBody {
  string requestSenderId = 1;
  string requestReceiverId = 2;
}

message GetConnectionsUsernamesRequest {
  string id = 1;
}

message GetConnectionsUsernamesResponse {
  repeated string usernames = 1;
}

message GetSuggestionIdsRequest {
  string id = 1;
}

message GetSuggestionIdsResponse {
  repeated string usernames = 1;
}